{"version":3,"sources":["components/CountryDetails/CountryDetails.module.scss","components/Dashboard/FilterBar/FilterBar.module.scss","components/Dashboard/Dashboard.module.scss","components/NavBar/NavBar.module.scss","components/Dashboard/CountryList/CountryList.module.scss","components/Dashboard/CountryList/Pagination/Pagination.module.scss","components/CountryDetails/BorderCountries/BorderCountries.module.scss","components/NotFoundPage/NotFound.module.scss","components/NavBar/NavBar.js","components/Dashboard/FilterBar/FilterBar.js","components/Dashboard/CountryList/CountryItem/CountryItem.js","components/Loading/Loading.js","components/Dashboard/CountryList/Pagination/Pagination.js","components/Dashboard/CountryList/CountryList.js","components/Dashboard/Dashboard.js","components/CountryDetails/BorderCountries/BorderCountries.js","components/CountryDetails/CountryDetails.js","components/NotFoundPage/NotFound.js","components/App.js","serviceWorker.js","index.js","components/Dashboard/CountryList/CountryItem/CountryItem.module.scss"],"names":["module","exports","NavBar","darkMode","appModeChanger","homePage","className","styles","container","navBar","to","bold","semiBold","onClick","FilterBar","countrySearchField","regionFilter","onCountrySearchFieldChange","onRegionChange","scrollTo","useState","dropDownFilterStatus","setDropDownFilterStatus","regionFilterRef","useRef","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","ref","filterBar","type","placeholder","onChange","e","value","charAt","toUpperCase","slice","arrow__Up","arrow__Down","a","innerHTML","CountryItem","capital","alpha2Code","name","population","region","countryItem","background","style","toLowerCase","textContainer","darkCaption","lightCaption","Numeral","format","Loading","src","process","alt","scroll","scrollIntoView","behavior","onSetCurrentPage","setCurrentPage","currentPage","pageNumberChangingStatus","paginationMiddleSectionCreator","totalPages","isActive","Fragment","undefined","elipsis","firstAndLastPagesPagination","paginationForSecondAndOneBeforeLastPage","Pagination","pagination","disabled","nextPage","CountryList","filteredCountries","totalCountries","setTotalPages","tempTotalPages","length","Math","ceil","countryList","map","country","key","countryItemCreator","error","Dashboard","props","setState","updateFilteredCountries","prevState","prevProps","filter","includes","React","createRef","state","title","this","dashboard","fillTheRemainingHeight","Component","BorderCountries","countryDetails","borderCountries","borders","alpha3Code","borderMaker","CountryDetails","onRedirect","redirect","fetchCounrtyDetails","axios","get","then","response","tempCountryDetails","data","find","match","params","countryName","notFoundStatus","catch","console","log","location","backButton","main","flag","details","detailsContainer","mainDetails","darkDetails","lightDetails","nativeName","subregion","additionalDetails","topLevelDomain","currencies","languages","NotFound","notFoundPage","App","res","exact","path","render","routeProps","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","getElementById","URL","href","origin","fetch","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.57fd0c52.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryDetails_container__2EX9N\",\"countryDetails\":\"CountryDetails_countryDetails__2CzDB\",\"backButton\":\"CountryDetails_backButton__2tI0i\",\"main\":\"CountryDetails_main__2FoTB\",\"flag\":\"CountryDetails_flag__2GPkJ\",\"details\":\"CountryDetails_details__H94GQ\",\"mainDetails\":\"CountryDetails_mainDetails__xigTZ\",\"additionalDetails\":\"CountryDetails_additionalDetails__2_IZM\",\"languages\":\"CountryDetails_languages__3Sx6S\",\"detailsContainer\":\"CountryDetails_detailsContainer__2a-GJ\",\"darkDetails\":\"CountryDetails_darkDetails__3WH48\",\"lightDetails\":\"CountryDetails_lightDetails__Ok-K7\",\"error\":\"CountryDetails_error__2iCQZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterBar_container__1Uhrt\",\"filterBar\":\"FilterBar_filterBar__3Jrd1\",\"regionFilter\":\"FilterBar_regionFilter__3g9DC\",\"rotate\":\"FilterBar_rotate__2wf1v\",\"dropDown\":\"FilterBar_dropDown__VJ6dZ\",\"arrow__Up\":\"FilterBar_arrow__Up__36Nkq\",\"arrow__Down\":\"FilterBar_arrow__Down__2frAo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dashboard_container__1_xqu\",\"dashboard\":\"Dashboard_dashboard__3qYi2\",\"fillTheRemainingHeight\":\"Dashboard_fillTheRemainingHeight__2bY6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NavBar_container__3z4th\",\"bold\":\"NavBar_bold__2GMVu\",\"semiBold\":\"NavBar_semiBold__11Ckh\",\"navBar\":\"NavBar_navBar__2bEBP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryList\":\"CountryList_countryList__YsN0o\",\"error\":\"CountryList_error__1fj-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__3KKpe\",\"fa-ellipsis-h\":\"Pagination_fa-ellipsis-h__3fJTi\",\"dark\":\"Pagination_dark__3oN3h\",\"light\":\"Pagination_light__1aj-X\",\"darkElements\":\"Pagination_darkElements__3mxbN\",\"lightElements\":\"Pagination_lightElements__177mC\",\"root\":\"Pagination_root__o1Dqf\",\"loadingGif\":\"Pagination_loadingGif__k2oxf\",\"pagination\":\"Pagination_pagination__wrDRy\",\"nextPage\":\"Pagination_nextPage__MfUmZ\",\"isActive\":\"Pagination_isActive__togTd\",\"elipsis\":\"Pagination_elipsis__2Zwcw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"borderCountries\":\"BorderCountries_borderCountries__3B5__\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notFoundPage\":\"NotFound_notFoundPage__1aQ1Y\"};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./NavBar.module.scss\";\r\n\r\nconst NavBar = ({ darkMode, appModeChanger, homePage }) => (\r\n  <>\r\n    <nav\r\n      className={`${styles.container} ${styles.navBar} ${\r\n        darkMode ? `dark darkElements` : `light lightElements`\r\n      }`}\r\n    >\r\n      <Link to={homePage} className={styles.bold}>\r\n        Where in the world?\r\n      </Link>\r\n      <button\r\n        className={`${styles.semiBold} ${\r\n          darkMode ? `dark darkElements` : `light lightElements`\r\n        }`}\r\n        onClick={appModeChanger}\r\n      >{/* change the icons based on darkMode's state */}\r\n        {darkMode ? (\r\n          <>\r\n            <i className=\"fas fa-moon\"></i> Light Mode\r\n          </>\r\n        ) : (\r\n          <>\r\n            <i className=\"far fa-moon\"></i> Dark Mode\r\n          </>\r\n        )}\r\n      </button>\r\n    </nav>\r\n  </>\r\n);\r\n\r\nexport default NavBar;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport styles from \"./FilterBar.module.scss\";\r\n\r\n/*\r\n  our custom Hook that alerts clicks outside of the passed ref\r\n */\r\nconst useOutsideAlerter = (regionFilterRef, setDropDownFilterStatus) => {\r\n  /**\r\n   * Alert if clicked on outside of element\r\n   */\r\n  const handleClickOutside = event => {\r\n    if (\r\n      regionFilterRef.current &&\r\n      !regionFilterRef.current.contains(event.target)\r\n    ) {\r\n      setDropDownFilterStatus(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  });\r\n};\r\n\r\nconst FilterBar = ({\r\n  countrySearchField,\r\n  darkMode,\r\n  regionFilter,\r\n  onCountrySearchFieldChange,\r\n  onRegionChange,\r\n  scrollTo\r\n}) => {\r\n  const [dropDownFilterStatus, setDropDownFilterStatus] = useState(false);\r\n  // using react ref for detecting a click outside of region filter's dropdown menu\r\n  const regionFilterRef = useRef(null);\r\n  //call our custom hook\r\n  useOutsideAlerter(regionFilterRef, setDropDownFilterStatus);\r\n\r\n  return (\r\n    <div\r\n      ref={scrollTo}\r\n      className={`${styles.filterBar} ${styles.container} ${\r\n        darkMode ? `dark` : `light`\r\n      }`}\r\n    >\r\n      {/* search bar */}\r\n      <span className={darkMode ? `darkElements` : `lightElements`}>\r\n        <i className=\"fas fa-search\"></i>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for a country...\"\r\n          onChange={e => onCountrySearchFieldChange(e.target.value)}\r\n          value={countrySearchField}\r\n        />\r\n      </span>\r\n      {/* region filter changer */}\r\n      <div className={styles.regionFilter} ref={regionFilterRef}>\r\n        <div\r\n          className={darkMode ? `darkElements` : `lightElements`}\r\n          onClick={() => setDropDownFilterStatus(!dropDownFilterStatus)}\r\n        >\r\n          <span>\r\n            {/* show the remove button */}\r\n            {regionFilter && (\r\n              <button\r\n                className={darkMode ? `darkElements` : `lightElements`}\r\n                onClick={() => onRegionChange(\"\")}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            )}\r\n            {/* region filter's title */}\r\n            {regionFilter\r\n              ? regionFilter.charAt(0).toUpperCase() + regionFilter.slice(1)\r\n              : \"Filter by Region\"}\r\n          </span>\r\n          <i\r\n            className={`fas fa-arrow-left ${\r\n              dropDownFilterStatus ? styles.arrow__Up : styles.arrow__Down\r\n            }`}\r\n          ></i>\r\n        </div>\r\n        {/* region filter's items' dropdown menu */}\r\n        {dropDownFilterStatus && (\r\n          <ul\r\n            className={darkMode ? `darkElements` : `lightElements`}\r\n            onClick={async e => {\r\n              await onRegionChange(e.target.innerHTML);\r\n              setDropDownFilterStatus(!dropDownFilterStatus);\r\n            }}\r\n          >\r\n            <li>africa</li>\r\n            <li>americas</li>\r\n            <li>asia</li>\r\n            <li>europe</li>\r\n            <li>oceania</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterBar;\r\n","import React from \"react\";\r\nimport Numeral from \"numeral\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./CountryItem.module.scss\";\r\n\r\nconst CountryItem = ({\r\n  capital,\r\n  alpha2Code,\r\n  darkMode,\r\n  name,\r\n  population,\r\n  region,\r\n  homePage\r\n}) => {\r\n  return (\r\n    <Link to={`${homePage}countries/${name}`}>\r\n      <figure\r\n        className={`${styles.countryItem} ${\r\n          darkMode ? `dark darkElements` : `light lightElements`\r\n        }`}\r\n      >\r\n        <div\r\n          className={styles.background}\r\n          style={{\r\n            background: `url(https://cdn.rawgit.com/hjnilsson/country-flags/master/svg/${alpha2Code.toLowerCase()}.svg)`\r\n          }}\r\n        ></div>\r\n        <figcaption className={styles.textContainer}>\r\n          <h2>{name}</h2>\r\n          <div>\r\n            Population :\r\n            <span\r\n              className={darkMode ? styles.darkCaption : styles.lightCaption}\r\n            >\r\n              {/* format the population number via numeral.js package */}\r\n              {Numeral(population).format(0, 0)}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            Region :\r\n            <span\r\n              className={darkMode ? styles.darkCaption : styles.lightCaption}\r\n            >\r\n              {region}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            Capital :\r\n            <span\r\n              className={darkMode ? styles.darkCaption : styles.lightCaption}\r\n            >\r\n              {capital || \"-\"}\r\n            </span>\r\n          </div>\r\n        </figcaption>\r\n      </figure>\r\n    </Link>\r\n  );\r\n};\r\n\r\nexport default CountryItem;\r\n","import React from \"react\";\r\n\r\nconst Loading = ({ darkMode }) => (\r\n  <img\r\n    className=\"loadingGif\"\r\n    src={`${process.env.PUBLIC_URL}/assets/pics/loading--${\r\n      darkMode ? `dark` : `light`\r\n    }.svg`}\r\n    alt=\"loading\"\r\n  />\r\n);\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport styles from \"./Pagination.module.scss\";\r\n\r\n//scrolling functionality\r\nconst scroll = scrollTo => {\r\n  scrollTo.current.scrollIntoView({ behavior: \"smooth\" });\r\n};\r\n\r\n//declare constants for determining the current situation for setCurrentPage function\r\nconst INCREMENT = \"INCREMENT\";\r\nconst DECREMENT = \"DECREMENT\";\r\n\r\n//setCurrentPage based on the state of the left and right buttons of the pagination\r\nconst onSetCurrentPage = (\r\n  setCurrentPage,\r\n  currentPage,\r\n  pageNumberChangingStatus,\r\n  scrollTo\r\n) => {\r\n  switch (pageNumberChangingStatus) {\r\n    case INCREMENT: {\r\n      scroll(scrollTo);\r\n      setCurrentPage(currentPage + 1);\r\n      break;\r\n    }\r\n    case DECREMENT: {\r\n      scroll(scrollTo);\r\n      setCurrentPage(currentPage - 1);\r\n      break;\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n};\r\n//create pagination for the first and last page\r\nconst firstAndLastPagesPagination = (\r\n  currentPage,\r\n  totalPages,\r\n  setCurrentPage,\r\n  scrollTo\r\n) => {\r\n  return (\r\n    <React.Fragment>\r\n      <button\r\n        onClick={\r\n          //only run the click event when we're on the last page\r\n          currentPage + 1 === totalPages\r\n            ? () => {\r\n                setCurrentPage(0);\r\n                scroll(scrollTo);\r\n              }\r\n            : undefined\r\n        }\r\n        \r\n        /* conditionally set the active class for the button */className={currentPage === 0 ? styles.isActive : undefined}\r\n      >\r\n        1\r\n      </button>\r\n      <button className={styles.elipsis}>\r\n        <i className=\"fas fa-ellipsis-h\"></i>\r\n      </button>\r\n      <button\r\n        onClick={\r\n          //only run the click event when we're on the first page\r\n          currentPage + 1 === 1\r\n            ? () => {\r\n                setCurrentPage(totalPages - 1);\r\n                scroll(scrollTo);\r\n              }\r\n            : undefined\r\n        }\r\n        /* conditionally set the active class for the button */\r\n        className={currentPage + 1 === totalPages ? styles.isActive : undefined}\r\n      >\r\n        {totalPages}\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n//create pagination for 2nd and n-1st page\r\nconst paginationForSecondAndOneBeforeLastPage = (\r\n  currentPage,\r\n  totalPages,\r\n  setCurrentPage,\r\n  scrollTo\r\n) => {\r\n  return (\r\n    <React.Fragment>\r\n      <button\r\n        onClick={() => {\r\n          setCurrentPage(0);\r\n          scroll(scrollTo);\r\n        }}\r\n      >\r\n        1\r\n      </button>\r\n      {currentPage + 1 === 2 ? (\r\n        //2nd page's buttons\r\n        <React.Fragment>\r\n          <button className={styles.isActive}>2</button>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n        </React.Fragment>\r\n      ) : (\r\n        //n-1st page's buttons\r\n        <React.Fragment>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n          <button className={styles.isActive}>{totalPages - 1}</button>\r\n        </React.Fragment>\r\n      )}\r\n      <button\r\n        onClick={() => {\r\n          setCurrentPage(totalPages - 1);\r\n          scroll(scrollTo);\r\n        }}\r\n      >\r\n        {totalPages}\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n//create pagination buttons based on the page's state\r\nconst paginationMiddleSectionCreator = (\r\n  currentPage,\r\n  totalPages,\r\n  setCurrentPage,\r\n  scrollTo\r\n) => {\r\n  //if there is only one page available\r\n  if (totalPages === 1) {\r\n    return <button className={styles.isActive}>1</button>;\r\n  }\r\n  switch (currentPage + 1) {\r\n    //create pagination buttons for 1st and last page\r\n    case 1:\r\n    case totalPages: {\r\n      return firstAndLastPagesPagination(\r\n        currentPage,\r\n        totalPages,\r\n        setCurrentPage,\r\n        scrollTo\r\n      );\r\n    }\r\n    // create pagination buttons for 2nd and n-1st page\r\n    case 2:\r\n    case totalPages - 1: {\r\n      return paginationForSecondAndOneBeforeLastPage(\r\n        currentPage,\r\n        totalPages,\r\n        setCurrentPage,\r\n        scrollTo\r\n      );\r\n    }\r\n    //create pagination buttons for the middle ones\r\n    default: {\r\n      return (\r\n        <React.Fragment>\r\n          <button\r\n            onClick={() => {\r\n              setCurrentPage(0);\r\n              scroll(scrollTo);\r\n            }}\r\n          >\r\n            1\r\n          </button>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n          <button className={styles.isActive}>{currentPage + 1}</button>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              setCurrentPage(totalPages - 1);\r\n              scroll(scrollTo);\r\n            }}\r\n          >\r\n            {totalPages}\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n//component declaration\r\nconst Pagination = ({\r\n  darkMode,\r\n  currentPage,\r\n  setCurrentPage,\r\n  totalPages,\r\n  scrollTo\r\n}) => {\r\n  return (\r\n    <div className={`${styles.pagination} ${darkMode ? `dark ` : `light `}`}>\r\n      {/* disable next and previous page buttons whenever there is only 1 page available */}\r\n      <button\r\n        onClick={() => {\r\n          onSetCurrentPage(setCurrentPage, currentPage, DECREMENT, scrollTo);\r\n        }}\r\n        disabled={currentPage === 0}\r\n      >\r\n        <i className=\"fas fa-arrow-left\"></i>\r\n      </button>\r\n      {/* create the middle buttons for pagination component, based on the currentPage */}\r\n      {paginationMiddleSectionCreator(\r\n        currentPage,\r\n        totalPages,\r\n        setCurrentPage,\r\n        scrollTo\r\n      )}\r\n      <button\r\n        className={styles.nextPage}\r\n        onClick={() => {\r\n          onSetCurrentPage(setCurrentPage, currentPage, INCREMENT, scrollTo);\r\n        }}\r\n        disabled={currentPage + 1 === totalPages}\r\n      >\r\n        <i className=\"fas fa-arrow-left\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CountryItem from \"./CountryItem/CountryItem\";\r\nimport Loading from \"../../Loading/Loading\";\r\nimport Pagination from \"./Pagination/Pagination\";\r\nimport styles from \"./CountryList.module.scss\";\r\n\r\n//create courntry  items\r\nconst countryItemCreator = (filteredCountries, currentPage, darkMode,homePage) => {\r\n  //create the items by mapping over the filtered countries\r\n  return filteredCountries\r\n    .slice(currentPage * 8, currentPage * 8 + 8)\r\n    .map(country => (\r\n      <CountryItem key={country.name} {...country} darkMode={darkMode} homePage={homePage} />\r\n    ));\r\n};\r\n\r\n//component declaration\r\nconst CountryList = ({ filteredCountries, darkMode, totalCountries,homePage ,scrollTo}) => {\r\n  //declare the state properties using react hooks\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n\r\n  //update totalpages whenever the filterd countries' list changes\r\n  useEffect(() => {\r\n    //calculate the number of totalpages if there are more than 8 countries available\r\n    //otherwise set it to 1\r\n    const tempTotalPages =\r\n      filteredCountries.length > 8\r\n        ? Math.ceil(filteredCountries.length / 8)\r\n        : 1;\r\n    setTotalPages(tempTotalPages);\r\n  }, [filteredCountries]);\r\n  //update the currentPage whenever the filteredcountries' list changes\r\n  useEffect(() => {\r\n    setCurrentPage(0);\r\n  }, [filteredCountries]);\r\n  return (\r\n    <section className={styles.countryList}>\r\n      {/* check if the countries have yet been fetched or not\r\n        if not->show loading gif\r\n        if they did->show the countries list\r\n      */}\r\n      {totalCountries.length > 0 ? (\r\n        filteredCountries.length !== 0 ? (\r\n          <React.Fragment>\r\n            <div>\r\n              {/* show only 8 countries per page based on the filtered countries' list*/}\r\n              {countryItemCreator(filteredCountries, currentPage, darkMode,homePage)}\r\n            </div>\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              darkMode={darkMode}\r\n              /* we use scollTo ref for the auto scoll behavior */\r\n              scrollTo={scrollTo}\r\n              setCurrentPage={setCurrentPage}\r\n              totalPages={totalPages}\r\n            />\r\n          </React.Fragment>\r\n        ) : (\r\n          <p className={styles.error}>\r\n            Oops, we have no idea what you're talking about\r\n            <br />\r\n            Search for something else\r\n          </p>\r\n        )\r\n      ) : (\r\n        <Loading darkMode={darkMode} />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default CountryList;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Dashboard.module.scss\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport FilterBar from \"./FilterBar/FilterBar\";\r\nimport CountryList from \"./CountryList/CountryList\";\r\nclass Dashboard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    /* create a ref for scrolling functionality */\r\n    this.scrollTo = React.createRef(null);\r\n    this.state = {\r\n      filteredCountries: null,\r\n      countrySearchField: \"\",\r\n      regionFilter: \"\"\r\n    };\r\n  }\r\n\r\n  //update the state whenever the searchfield changes\r\n  onCountrySearchFieldChange = country => {\r\n    this.setState(\r\n      () => ({ countrySearchField: country }),\r\n      this.updateFilteredCountries\r\n    );\r\n  };\r\n\r\n  //update region filter based on the dropdown menu's current item\r\n  onRegionChange = region => {\r\n    this.setState(\r\n      () => ({ regionFilter: region }),\r\n      this.updateFilteredCountries\r\n    );\r\n  };\r\n\r\n  //update the filtered countries list based on the current state\r\n  updateFilteredCountries = () => {\r\n    this.setState((prevState, prevProps) => {\r\n      const { totalCountries } = prevProps;\r\n      const { countrySearchField, regionFilter } = prevState;\r\n      //filter based on searchfield\r\n      let filteredCountries = totalCountries.filter(country => {\r\n        return country.name\r\n          .toLowerCase()\r\n          .includes(countrySearchField.toLowerCase());\r\n      });\r\n      //filter based on region\r\n      if (regionFilter) {\r\n        filteredCountries = filteredCountries.filter(country => {\r\n          return country.region.toLowerCase() === regionFilter.toLowerCase();\r\n        });\r\n      }\r\n      return { filteredCountries };\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    //update the document's title right after the component is mounted\r\n    document.title = \"Where in the World ?\";\r\n  }\r\n\r\n  render() {\r\n    const { countrySearchField, filteredCountries, regionFilter } = this.state;\r\n    const { totalCountries, homePage } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <header className={styles.dashboard}>\r\n          <NavBar\r\n            darkMode={this.props.darkMode}\r\n            appModeChanger={this.props.appModeChanger}\r\n            homePage={homePage}\r\n          />\r\n          <FilterBar\r\n            countrySearchField={countrySearchField}\r\n            darkMode={this.props.darkMode}\r\n            regionFilter={regionFilter}\r\n            onCountrySearchFieldChange={this.onCountrySearchFieldChange}\r\n            onRegionChange={this.onRegionChange}\r\n            scrollTo={this.scrollTo}\r\n          />\r\n        </header>\r\n        <main\r\n          className={`${styles.container} ${styles.dashboard} ${\r\n            styles.fillTheRemainingHeight\r\n          } ${this.props.darkMode ? `dark` : `light`}`}\r\n        >\r\n          <CountryList\r\n            filteredCountries={\r\n              filteredCountries ? filteredCountries : totalCountries\r\n            }\r\n            homePage={homePage}\r\n            totalCountries={totalCountries}\r\n            darkMode={this.props.darkMode}\r\n            scrollTo={this.scrollTo}\r\n          />\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./BorderCountries.module.scss\";\r\n\r\n/* create the adjcent countries list\r\nbased on the borders of the current country */\r\nconst borderMaker = (totalCountries, countryDetails, darkMode, homePage) => {\r\n  /*  create the adjacent countries list =>\r\n  1- check through total countries list for those countries\r\n  whose alpha3code is included in the borders list of the current country\r\n  2-add the country to the borderCountries' list */\r\n  let borderCountries = totalCountries.filter(country => {\r\n    return countryDetails.borders.includes(country.alpha3Code);\r\n  });\r\n  /* create a seperate link for each country */\r\n  borderCountries = borderCountries.map(country => (\r\n    <Link\r\n      to={`${homePage}countries/${country.name}`}\r\n      key={country.name}\r\n      className={darkMode ? `dark darkElements` : `light lightElements`}\r\n    >\r\n      {country.name}\r\n    </Link>\r\n  ));\r\n  /* only return the list when the list isn't empty */\r\n  return (\r\n    borderCountries.length !== 0 && (\r\n      <React.Fragment>\r\n        <h3>Border Countries: </h3>\r\n        <div> {borderCountries}</div>\r\n      </React.Fragment>\r\n    )\r\n  );\r\n};\r\n\r\n//COMPONENT DECLARATION\r\nconst BorderCountries = ({\r\n  totalCountries,\r\n  countryDetails,\r\n  darkMode,\r\n  homePage\r\n}) => (\r\n  <div className={`${styles.borderCountries} ${darkMode ? \"dark\" : \"light\"}`}>\r\n    {borderMaker(totalCountries, countryDetails, darkMode, homePage)}\r\n  </div>\r\n);\r\n\r\nexport default BorderCountries;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Numeral from \"numeral\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\nimport styles from \"./CountryDetails.module.scss\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport Loading from \"../Loading/Loading\";\r\nimport BorderCountries from \"./BorderCountries/BorderCountries\";\r\n\r\nclass CountryDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryDetails: null,\r\n      notFoundStatus: false\r\n    };\r\n  }\r\n\r\n  //redirect function\r\n  onRedirect = () => {\r\n    return this.state.redirect && <Redirect to=\"/404\" />;\r\n  };\r\n\r\n  //get the country details\r\n  fetchCounrtyDetails = () => {\r\n    axios\r\n      .get(\r\n        `https://raw.githubusercontent.com/sinamoraddar/REST-Countries-API-with-color-theme-switcher--API/master/all.json`\r\n      )\r\n      .then(response => {\r\n        //search for the current country in the countries list\r\n        const tempCountryDetails = response.data.find(\r\n          country => country.name === this.props.match.params.countryName\r\n        );\r\n        //do something whether the country was found or not\r\n        if (tempCountryDetails) {\r\n          this.setState(() => ({\r\n            countryDetails: tempCountryDetails\r\n          }));\r\n        } else {\r\n          this.setState(() => ({ countryDetails: true, notFoundStatus: true }));\r\n        }\r\n      })\r\n      .catch(error => console.log(error));\r\n  };\r\n\r\n  componentDidMount() {\r\n    //set the document's title after the first render\r\n    document.title = this.props.match.params.countryName;\r\n    //get the necessary data for the current country\r\n    this.fetchCounrtyDetails();\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    //set the document's title  whenever the component receives an update\r\n    document.title = this.props.match.params.countryName;\r\n    //detect if the url key has changed and then update the state based on that\r\n    if (prevProps.location.key !== this.props.location.key) {\r\n      this.fetchCounrtyDetails();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { darkMode, appModeChanger, totalCountries, homePage } = this.props;\r\n    const { countryDetails, notFoundStatus } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <header\r\n          className={`${styles.countryDetails} ${darkMode ? `dark` : `light`}`}\r\n        >\r\n          <NavBar\r\n            darkMode={darkMode}\r\n            homePage={homePage}\r\n            appModeChanger={appModeChanger}\r\n          />\r\n          <Link\r\n            to={homePage}\r\n            className={`${styles.backButton} ${\r\n              darkMode ? \"dark darkElements\" : \"light lightElements\"\r\n            }`}\r\n          >\r\n            <i className=\"fas fa-arrow-left\"></i>\r\n            Back\r\n          </Link>\r\n        </header>\r\n        <main\r\n          className={`${styles.countryDetails} ${styles.main}  ${\r\n            darkMode ? `dark` : `light`\r\n          }`}\r\n        >\r\n          {/* if the country details have not been fetched yet -> show the loading gif\r\n              if they have-> show the details\r\n          */}\r\n          {countryDetails ? (\r\n            /* show a message if the country ain't available in our database,\r\n            otherwise show the content */\r\n            notFoundStatus ? (\r\n              <p className={styles.error}>\r\n                sorry we we have no idea about the thing you're looking for\r\n              </p>\r\n            ) : (\r\n              <React.Fragment>\r\n                <div className={styles.flag}>\r\n                  <img\r\n                    src={`https://cdn.rawgit.com/hjnilsson/country-flags/master/svg/${countryDetails.alpha2Code.toLowerCase()}.svg`}\r\n                    alt={`${countryDetails.name} flag`}\r\n                  />\r\n                </div>\r\n                <div className={styles.details}>\r\n                  <h1> {this.props.match.params.countryName}</h1>\r\n                  <div className={styles.detailsContainer}>\r\n                    <div className={styles.mainDetails}>\r\n                      <p>\r\n                        Native Name:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >\r\n                          {countryDetails.nativeName}{\" \"}\r\n                        </span>\r\n                      </p>\r\n                      <p>\r\n                        Population:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >{/* filter the population number with numeral.js package */}\r\n                          {Numeral(countryDetails.population).format(0, 0)}\r\n                        </span>\r\n                      </p>\r\n                      <p>\r\n                        Region:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >\r\n                          {countryDetails.region}\r\n                        </span>\r\n                      </p>\r\n                      <p>\r\n                        Sub Region:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >\r\n                          {\" \"}\r\n                          {countryDetails.subregion}\r\n                        </span>\r\n                      </p>\r\n                      <p>\r\n                        Capital:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >\r\n                          {\" \"}\r\n                          {countryDetails.capital}\r\n                        </span>\r\n                      </p>\r\n                    </div>\r\n                    <div className={styles.additionalDetails}>\r\n                      <p>\r\n                        Top Level Domain:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >\r\n                          {countryDetails.topLevelDomain}\r\n                        </span>\r\n                      </p>\r\n                      <p>\r\n                        Currencies:{\" \"}\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                        >\r\n                          {\" \"}\r\n                          {countryDetails.currencies[0].name}\r\n                        </span>\r\n                      </p>\r\n                      <p className={styles.languages}>\r\n                        Languages :\r\n                        {countryDetails.languages.map(({ name }) => (\r\n                          <span\r\n                            className={\r\n                              darkMode\r\n                                ? styles.darkDetails\r\n                                : styles.lightDetails\r\n                            }\r\n                            key={name}\r\n                          >\r\n                            {name}\r\n                          </span>\r\n                        ))}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                  {/* render the border countries */}\r\n                  {totalCountries && (\r\n                    <BorderCountries\r\n                      {...{ totalCountries, countryDetails }}\r\n                      darkMode={darkMode}\r\n                      homePage={homePage}\r\n                    />\r\n                  )}\r\n                </div>\r\n              </React.Fragment>\r\n            )\r\n          ) : (\r\n            <Loading darkMode={darkMode} homePage={homePage} />\r\n          )}\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./NotFound.module.scss\";\r\nconst NotFound = ({ darkMode, homePage }) => (\r\n  <main className={`${styles.notFoundPage} ${darkMode ? `dark` : `light`}`}>\r\n    404 not found\r\n    <Link to={homePage} className={darkMode ? \"darkElements\" : \"lightElements\"}>\r\n      Go Back Home\r\n    </Link>\r\n  </main>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport Dashboard from \"./Dashboard/Dashboard\";\nimport CountryDetails from \"./CountryDetails/CountryDetails\";\nimport NotFound from \"./NotFoundPage/NotFound\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    //determine the homepage path based on the development mode\n    this.homePage =\n      process.env.NODE_ENV === \"development\"\n        ? \"/\"\n        : \"/REST-Countries-API-with-color-theme-switcher/\";\n  }\n  state = {\n    darkMode: true,\n    totalCountries: []\n  };\n  //change the darkmode state based on user interaction\n  appModeChanger = () => {\n    this.setState(prevState => ({ darkMode: !prevState.darkMode }));\n  };\n\n  componentDidMount() {\n    // fetch the countrylist's data from the api\n    // we saved the json file in another repository on github cause the original api was broken somehow\n    axios\n      .get(\n        `https://raw.githubusercontent.com/sinamoraddar/REST-Countries-API-with-color-theme-switcher--API/master/all.json`\n      )\n      .then(res => {\n        this.setState(() => ({\n          totalCountries: res.data\n        }));\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    const { darkMode, totalCountries } = this.state;\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route\n            exact\n            path={this.homePage}\n            render={routeProps => (\n              <Dashboard\n                {...routeProps}\n                appModeChanger={this.appModeChanger}\n                darkMode={darkMode}\n                homePage={this.homePage}\n                totalCountries={totalCountries}\n              />\n            )}\n          ></Route>\n          <Route\n            exact\n            path={`${this.homePage}countries/:countryName`}\n            render={routeProps => (\n              <CountryDetails\n                {...routeProps}\n                darkMode={darkMode}\n                homePage={this.homePage}\n                appModeChanger={this.appModeChanger}\n                totalCountries={totalCountries}\n              />\n            )}\n          />\n          <Route\n            render={routeProps => (\n              <NotFound\n                {...routeProps}\n                darkMode={darkMode}\n                homePage={this.homePage}\n              />\n            )}\n          />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryItem\":\"CountryItem_countryItem__3U-yw\",\"background\":\"CountryItem_background__j1Wge\",\"textContainer\":\"CountryItem_textContainer__1YuW0\",\"darkCaption\":\"CountryItem_darkCaption__2pvJJ\",\"lightCaption\":\"CountryItem_lightCaption__1Kie4\"};"],"sourceRoot":""}