{"version":3,"sources":["components/CountryDetails/CountryDetails.module.scss","components/Dashboard/FilterBar/FilterBar.module.scss","components/Dashboard/Dashboard.module.scss","components/NavBar/NavBar.module.scss","components/Dashboard/CountryList/CountryList.module.scss","components/Dashboard/CountryList/Pagination/Pagination.module.scss","components/CountryDetails/BorderCountries/BorderCountries.module.scss","components/NavBar/NavBar.js","components/Dashboard/FilterBar/FilterBar.js","components/Dashboard/CountryList/CountryItem/CountryItem.js","components/Loading/Loading.js","components/Dashboard/CountryList/Pagination/Pagination.js","components/Dashboard/CountryList/CountryList.js","components/Dashboard/Dashboard.js","components/CountryDetails/BorderCountries/BorderCountries.js","components/CountryDetails/CountryDetails.js","components/NotFoundPage/NotFound.js","components/App.js","serviceWorker.js","index.js","components/Dashboard/CountryList/CountryItem/CountryItem.module.scss"],"names":["module","exports","NavBar","darkMode","appModeChanger","page","className","styles","container","navBar","to","bold","semiBold","onClick","FilterBar","countrySearchField","regionFilter","onCountrySearchFieldChange","onRegionChange","useState","dropDownFilterStatus","setDropDownFilterStatus","wrapperRef","useRef","ref","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","useOutsideAlerter","filterBar","type","placeholder","onChange","e","value","charAt","toUpperCase","slice","arrow__Up","arrow__Down","a","innerHTML","CountryItem","capital","name","population","region","flag","countryItem","background","style","textContainer","darkCaption","lightCaption","Numeral","format","Loading","src","alt","onSetCurrentPage","setCurrentPage","currentPage","pageNumberChangingStatus","paginationMiddleSectionCreator","totalPages","isActive","Fragment","undefined","elipsis","firstAndLastPagesPagination","paginationForSecondAndOneBeforeLastPage","Pagination","pagination","disabled","nextPage","CountryList","filteredCountries","totalCountries","setTotalPages","tempTotalPages","length","Math","ceil","countryList","map","country","key","countryItemCreator","error","Dashboard","state","setState","updateFilteredCountries","prevState","prevProps","filter","toLowerCase","includes","this","props","dashboard","fillTheRemainingHeight","Component","BorderCountries","countryDetails","borderCountries","borders","alpha3Code","borderMaker","CountryDetails","axios","get","match","params","countryName","then","response","data","catch","console","log","location","backButton","main","details","detailsContainer","mainDetails","darkDetails","lightDetails","nativeName","subregion","additionalDetails","topLevelDomain","currencies","languages","NotFound","App","res","exact","path","render","routeProps","component","Boolean","window","hostname","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56c44fb4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryDetails_container__2EX9N\",\"countryDetails\":\"CountryDetails_countryDetails__2CzDB\",\"dark\":\"CountryDetails_dark__kMKnb\",\"light\":\"CountryDetails_light__2B-NA\",\"backButton\":\"CountryDetails_backButton__2tI0i\",\"main\":\"CountryDetails_main__2FoTB\",\"flag\":\"CountryDetails_flag__2GPkJ\",\"details\":\"CountryDetails_details__H94GQ\",\"mainDetails\":\"CountryDetails_mainDetails__xigTZ\",\"additionalDetails\":\"CountryDetails_additionalDetails__2_IZM\",\"languages\":\"CountryDetails_languages__3Sx6S\",\"detailsContainer\":\"CountryDetails_detailsContainer__2a-GJ\",\"darkDetails\":\"CountryDetails_darkDetails__3WH48\",\"lightDetails\":\"CountryDetails_lightDetails__Ok-K7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"FilterBar_container__1Uhrt\",\"filterBar\":\"FilterBar_filterBar__3Jrd1\",\"regionFilter\":\"FilterBar_regionFilter__3g9DC\",\"rotate\":\"FilterBar_rotate__2wf1v\",\"arrow__Up\":\"FilterBar_arrow__Up__36Nkq\",\"arrow__Down\":\"FilterBar_arrow__Down__2frAo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Dashboard_container__1_xqu\",\"dashboard\":\"Dashboard_dashboard__3qYi2\",\"fillTheRemainingHeight\":\"Dashboard_fillTheRemainingHeight__2bY6n\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NavBar_container__3z4th\",\"navBar\":\"NavBar_navBar__2bEBP\",\"bold\":\"NavBar_bold__2GMVu\",\"semiBold\":\"NavBar_semiBold__11Ckh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryList\":\"CountryList_countryList__YsN0o\",\"error\":\"CountryList_error__1fj-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Pagination_container__3KKpe\",\"fa-ellipsis-h\":\"Pagination_fa-ellipsis-h__3fJTi\",\"dark\":\"Pagination_dark__3oN3h\",\"light\":\"Pagination_light__1aj-X\",\"darkElements\":\"Pagination_darkElements__3mxbN\",\"lightElements\":\"Pagination_lightElements__177mC\",\"root\":\"Pagination_root__o1Dqf\",\"loadingGif\":\"Pagination_loadingGif__k2oxf\",\"pagination\":\"Pagination_pagination__wrDRy\",\"nextPage\":\"Pagination_nextPage__MfUmZ\",\"isActive\":\"Pagination_isActive__togTd\",\"elipsis\":\"Pagination_elipsis__2Zwcw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"borderCountries\":\"BorderCountries_borderCountries__3B5__\"};","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./NavBar.module.scss\";\r\n\r\nconst NavBar = ({ darkMode, page, appModeChanger }) => (\r\n  <>\r\n    <nav\r\n      className={`${styles.container} ${styles.navBar} ${\r\n        darkMode ? `dark darkElements` : `light lightElements`\r\n      }`}\r\n    >\r\n      <Link to=\"/\" className={styles.bold}>\r\n        Where in the world?\r\n      </Link>\r\n      <button\r\n        className={`${styles.semiBold} ${\r\n          darkMode ? `dark darkElements` : `light lightElements`\r\n        }`}\r\n        onClick={appModeChanger}\r\n      >\r\n        {darkMode ? (\r\n          <>\r\n            <i className=\"fas fa-moon\"></i> Light Mode\r\n          </>\r\n        ) : (\r\n          <>\r\n            <i className=\"far fa-moon\"></i> Dark Mode\r\n          </>\r\n        )}\r\n      </button>\r\n    </nav>\r\n  </>\r\n);\r\n\r\nexport default NavBar;\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport styles from \"./FilterBar.module.scss\";\r\n\r\n/**\r\n * Hook that alerts clicks outside of the passed ref\r\n */\r\nconst useOutsideAlerter = (ref, setDropDownFilterStatus) => {\r\n  /**\r\n   * Alert if clicked on outside of element\r\n   */\r\n  const handleClickOutside = event => {\r\n    if (ref.current && !ref.current.contains(event.target)) {\r\n      setDropDownFilterStatus(false);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    // Bind the event listener\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => {\r\n      // Unbind the event listener on clean up\r\n      document.removeEventListener(\"mousedown\", handleClickOutside);\r\n    };\r\n  });\r\n};\r\n\r\nconst FilterBar = ({\r\n  countrySearchField,\r\n  darkMode,\r\n  regionFilter,\r\n  onCountrySearchFieldChange,\r\n  onRegionChange\r\n}) => {\r\n  const [dropDownFilterStatus, setDropDownFilterStatus] = useState(false);\r\n  // using react ref for detecting a click outside of region filter's dropdown menu\r\n  const wrapperRef = useRef(null);\r\n  useOutsideAlerter(wrapperRef, setDropDownFilterStatus);\r\n  return (\r\n    <div\r\n      className={`${styles.filterBar} ${styles.container} ${\r\n        darkMode ? `dark` : `light`\r\n      }`}\r\n    >\r\n      {/* search bar */}\r\n      <span className={darkMode ? `darkElements` : `lightElements`}>\r\n        <i className=\"fas fa-search\"></i>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search for a country...\"\r\n          onChange={e => onCountrySearchFieldChange(e.target.value)}\r\n          value={countrySearchField}\r\n        />\r\n      </span>\r\n      {/* region filter changer */}\r\n      <div className={styles.regionFilter} ref={wrapperRef}>\r\n        <div\r\n          className={darkMode ? `darkElements` : `lightElements`}\r\n          onClick={() => setDropDownFilterStatus(!dropDownFilterStatus)}\r\n        >\r\n          <span>\r\n            {/* show the remove button */}\r\n            {regionFilter && (\r\n              <button\r\n                className={darkMode ? `darkElements` : `lightElements`}\r\n                onClick={() => onRegionChange(\"\")}\r\n              >\r\n                <i className=\"fas fa-times\"></i>\r\n              </button>\r\n            )}\r\n            {/* region filter's title */}\r\n            {regionFilter\r\n              ? regionFilter.charAt(0).toUpperCase() + regionFilter.slice(1)\r\n              : \"Filter by Region\"}\r\n          </span>\r\n          <i\r\n            className={`fas fa-arrow-left ${\r\n              dropDownFilterStatus ? styles.arrow__Up : styles.arrow__Down\r\n            }`}\r\n          ></i>\r\n        </div>\r\n        {/* region filter's items' dropdown menu */}\r\n        {dropDownFilterStatus && (\r\n          <ul\r\n            className={darkMode ? `darkElements` : `lightElements`}\r\n            onClick={async e => {\r\n              await onRegionChange(e.target.innerHTML);\r\n              setDropDownFilterStatus(!dropDownFilterStatus);\r\n            }}\r\n          >\r\n            <li>africa</li>\r\n            <li>americas</li>\r\n            <li>asia</li>\r\n            <li>europe</li>\r\n            <li>oceania</li>\r\n          </ul>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterBar;\r\n","import React from \"react\";\r\nimport Numeral from \"numeral\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./CountryItem.module.scss\";\r\n\r\nconst CountryItem = ({ capital, darkMode, name, population, region, flag }) => {\r\n  // console.log(\"rest\", rest);\r\n  return (\r\n    <Link to={`/${name}`}>\r\n      <figure\r\n        className={`${styles.countryItem} ${\r\n          darkMode ? `dark darkElements` : `light lightElements`\r\n        }`}\r\n      >\r\n        <div\r\n          className={styles.background}\r\n          style={{ background: `url(${flag})` }}\r\n        ></div>\r\n        <figcaption className={styles.textContainer}>\r\n          <h2>{name}</h2>\r\n          <div>\r\n            Population :\r\n            <span\r\n              className={darkMode ? styles.darkCaption : styles.lightCaption}\r\n            >\r\n              {Numeral(population).format(0, 0)}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            Region :\r\n            <span\r\n              className={darkMode ? styles.darkCaption : styles.lightCaption}\r\n            >\r\n              {region}\r\n            </span>\r\n          </div>\r\n          <div>\r\n            Capital :\r\n            <span\r\n              className={darkMode ? styles.darkCaption : styles.lightCaption}\r\n            >\r\n              {capital || \"-\"}\r\n            </span>\r\n          </div>\r\n        </figcaption>\r\n      </figure>\r\n    </Link>\r\n    /*   <div>hi</div> */\r\n  );\r\n};\r\n\r\nexport default CountryItem;\r\n","import React from \"react\";\r\n\r\nconst Loading = ({ darkMode }) => (\r\n  <img\r\n    className=\"loadingGif\"\r\n    src={`../../../assets/pics/loading--${darkMode ? `dark` : `light`}.svg`}\r\n    alt=\"loading\"\r\n  />\r\n);\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport styles from \"./Pagination.module.scss\";\r\n\r\n//declare constants for determining the current situation for setCurrentPage function\r\nconst INCREMENT = \"INCREMENT\";\r\nconst DECREMENT = \"DECREMENT\";\r\n//setCurrentPage based on user interactions\r\nconst onSetCurrentPage = (\r\n  setCurrentPage,\r\n  currentPage,\r\n  pageNumberChangingStatus\r\n) => {\r\n  switch (pageNumberChangingStatus) {\r\n    case INCREMENT: {\r\n      setCurrentPage(currentPage + 1);\r\n      break;\r\n    }\r\n    case DECREMENT: {\r\n      setCurrentPage(currentPage - 1);\r\n      break;\r\n    }\r\n    default:\r\n      break;\r\n  }\r\n};\r\n//create pagination for the first and last page\r\nconst firstAndLastPagesPagination = (\r\n  currentPage,\r\n  totalPages,\r\n  setCurrentPage\r\n) => {\r\n  return (\r\n    <React.Fragment>\r\n      <button\r\n        onClick={\r\n          currentPage + 1 === totalPages ? () => setCurrentPage(0) : undefined\r\n        }\r\n        className={currentPage === 0 ? styles.isActive : undefined}\r\n      >\r\n        1\r\n      </button>\r\n      <button className={styles.elipsis}>\r\n        <i className=\"fas fa-ellipsis-h\"></i>\r\n      </button>\r\n      <button\r\n        onClick={\r\n          currentPage + 1 === 1\r\n            ? () => setCurrentPage(totalPages - 1)\r\n            : undefined\r\n        }\r\n        className={currentPage + 1 === totalPages ? styles.isActive : undefined}\r\n      >\r\n        {totalPages}\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n//create pagination for 2nd and n-1st page\r\nconst paginationForSecondAndOneBeforeLastPage = (\r\n  currentPage,\r\n  totalPages,\r\n  setCurrentPage\r\n) => {\r\n  return (\r\n    <React.Fragment>\r\n      <button onClick={() => setCurrentPage(0)}>1</button>\r\n      {currentPage + 1 === 2 ? (\r\n        //2nd page's buttons\r\n        <React.Fragment>\r\n          <button className={styles.isActive}>2</button>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n        </React.Fragment>\r\n      ) : (\r\n        //n-1st page's buttons\r\n        <React.Fragment>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n          <button className={styles.isActive}>{totalPages - 1}</button>\r\n        </React.Fragment>\r\n      )}\r\n      <button onClick={() => setCurrentPage(totalPages - 1)}>\r\n        {totalPages}\r\n      </button>\r\n    </React.Fragment>\r\n  );\r\n};\r\n//create pagination buttons based on the page's state\r\nconst paginationMiddleSectionCreator = (\r\n  currentPage,\r\n  totalPages,\r\n  setCurrentPage\r\n) => {\r\n  //if there is only one page available\r\n  if (totalPages === 1) {\r\n    return <button className={styles.isActive}>1</button>;\r\n  }\r\n  switch (currentPage + 1) {\r\n    //create pagination buttons for 1st and last page\r\n    case 1:\r\n    case totalPages: {\r\n      return firstAndLastPagesPagination(\r\n        currentPage,\r\n        totalPages,\r\n        setCurrentPage\r\n      );\r\n    }\r\n    // create pagination buttons for 2nd and n-1st page\r\n    case 2:\r\n    case totalPages - 1: {\r\n      return paginationForSecondAndOneBeforeLastPage(\r\n        currentPage,\r\n        totalPages,\r\n        setCurrentPage\r\n      );\r\n    }\r\n    //create pagination buttons for the middle ones\r\n    default: {\r\n      return (\r\n        <React.Fragment>\r\n          <button onClick={() => setCurrentPage(0)}>1</button>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n          <button className={styles.isActive}>{currentPage + 1}</button>\r\n          <button className={styles.elipsis}>\r\n            <i className=\"fas fa-ellipsis-h\"></i>\r\n          </button>\r\n          <button onClick={() => setCurrentPage(totalPages - 1)}>\r\n            {totalPages}\r\n          </button>\r\n        </React.Fragment>\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\n//component declaration\r\nconst Pagination = ({ darkMode, currentPage, setCurrentPage, totalPages }) => {\r\n  return (\r\n    <div className={`${styles.pagination} ${darkMode ? `dark ` : `light `}`}>\r\n      {/* disable next and previous page buttons whenever there is only 1 page available */}\r\n      <button\r\n        onClick={() => onSetCurrentPage(setCurrentPage, currentPage, DECREMENT)}\r\n        disabled={currentPage === 0}\r\n      >\r\n        <i className=\"fas fa-arrow-left\"></i>\r\n      </button>\r\n      {/* create the middle buttons for pagination component, based on the currentPage */}\r\n      {paginationMiddleSectionCreator(currentPage, totalPages, setCurrentPage)}\r\n      <button\r\n        className={styles.nextPage}\r\n        onClick={() => onSetCurrentPage(setCurrentPage, currentPage, INCREMENT)}\r\n        disabled={currentPage + 1 === totalPages}\r\n      >\r\n        <i className=\"fas fa-arrow-left\"></i>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CountryItem from \"./CountryItem/CountryItem\";\r\nimport Loading from \"../../Loading/Loading\";\r\nimport Pagination from \"./Pagination/Pagination\";\r\nimport styles from \"./CountryList.module.scss\";\r\n\r\n//create courntry  items\r\nconst countryItemCreator = (filteredCountries, currentPage, darkMode) => {\r\n  return filteredCountries\r\n    .slice(currentPage * 8, currentPage * 8 + 8)\r\n    .map(country => (\r\n      <CountryItem key={country.name} {...country} darkMode={darkMode} />\r\n    ));\r\n};\r\n\r\n//component declaration\r\nconst CountryList = ({ filteredCountries, darkMode, totalCountries }) => {\r\n  //currentpage,pageCountriesLimit,\r\n  //pagination should have 5 sections ->{<leftNegighbot,currentpage,...,lastPage,rightNeighbor>}\r\n  const [currentPage, setCurrentPage] = useState(0);\r\n  const [totalPages, setTotalPages] = useState(1);\r\n  //update totalpages based on the current list of filtered countries\r\n  useEffect(() => {\r\n    //calculate the number of totalpages if there are more than 8 countries available\r\n    //otherwise set it to 1\r\n    const tempTotalPages =\r\n      filteredCountries.length > 8\r\n        ? Math.ceil(filteredCountries.length / 8)\r\n        : 1;\r\n    setTotalPages(tempTotalPages);\r\n  }, [filteredCountries]);\r\n  //update the currentPage whenever the filteredcountries changes\r\n  useEffect(() => {\r\n    setCurrentPage(0);\r\n  }, [filteredCountries]);\r\n  return (\r\n    <section className={styles.countryList}>\r\n      {/* check if the countries have yet been fetched or not\r\n        if not->show loading gif\r\n        if done->show the countries list\r\n      */}\r\n      {totalCountries.length > 0 ? (\r\n        filteredCountries.length !== 0 ? (\r\n          <React.Fragment>\r\n            <div>\r\n              {/* show only 8 countries per page based on the filtered countries */}\r\n              {countryItemCreator(filteredCountries, currentPage, darkMode)}\r\n            </div>\r\n            <Pagination\r\n              currentPage={currentPage}\r\n              darkMode={darkMode}\r\n              setCurrentPage={setCurrentPage}\r\n              totalPages={totalPages}\r\n            />\r\n          </React.Fragment>\r\n        ) : (\r\n          <p className={styles.error}>\r\n            Oops, we have no idea what you're talking about\r\n            <br />\r\n            Search for something else\r\n          </p>\r\n        )\r\n      ) : (\r\n        <Loading darkMode={darkMode} />\r\n      )}\r\n    </section>\r\n  );\r\n};\r\nexport default CountryList;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Dashboard.module.scss\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport FilterBar from \"./FilterBar/FilterBar\";\r\nimport CountryList from \"./CountryList/CountryList\";\r\nclass Dashboard extends Component {\r\n  state = {\r\n    filteredCountries: null,\r\n    countrySearchField: \"\",\r\n    regionFilter: \"\"\r\n  };\r\n  //update the state whenever the searchfield changes\r\n  onCountrySearchFieldChange = country => {\r\n    this.setState(\r\n      () => ({ countrySearchField: country }),\r\n      this.updateFilteredCountries\r\n    );\r\n  };\r\n\r\n  //update region filter based on the dropdown menu's current item\r\n  onRegionChange = region => {\r\n    this.setState(\r\n      () => ({ regionFilter: region }),\r\n      this.updateFilteredCountries\r\n    );\r\n  };\r\n\r\n  //update the filtered countries list based on the current state\r\n  updateFilteredCountries = () => {\r\n    this.setState((prevState, prevProps) => {\r\n      const { totalCountries } = prevProps;\r\n      const { countrySearchField, regionFilter } = prevState;\r\n      //filter based on searchfield\r\n      let filteredCountries = totalCountries.filter(country => {\r\n        return country.name\r\n          .toLowerCase()\r\n          .includes(countrySearchField.toLowerCase());\r\n      });\r\n      //filter based on region\r\n      if (regionFilter) {\r\n        filteredCountries = filteredCountries.filter(country => {\r\n          return country.region.toLowerCase() === regionFilter.toLowerCase();\r\n        });\r\n      }\r\n      return { filteredCountries };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    // console.log(\"this is from dashboard\", this.props.totalCountries);\r\n    const { countrySearchField, filteredCountries, regionFilter } = this.state;\r\n    const { totalCountries } = this.props;\r\n    return (\r\n      <React.Fragment>\r\n        <header className={styles.dashboard}>\r\n          <NavBar\r\n            darkMode={this.props.darkMode}\r\n            appModeChanger={this.props.appModeChanger}\r\n          />\r\n          <FilterBar\r\n            countrySearchField={countrySearchField}\r\n            darkMode={this.props.darkMode}\r\n            regionFilter={regionFilter}\r\n            onCountrySearchFieldChange={this.onCountrySearchFieldChange}\r\n            onRegionChange={this.onRegionChange}\r\n          />\r\n        </header>\r\n        <main\r\n          className={`${styles.container} ${styles.dashboard} ${\r\n            styles.fillTheRemainingHeight\r\n          } ${this.props.darkMode ? `dark` : `light`}`}\r\n        >\r\n          <CountryList\r\n            filteredCountries={\r\n              filteredCountries ? filteredCountries : totalCountries\r\n            }\r\n            totalCountries={totalCountries}\r\n            darkMode={this.props.darkMode}\r\n          />\r\n        </main>\r\n        {/* <footer className=\"dashboard\"></footer> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nexport default Dashboard;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./BorderCountries.module.scss\";\r\n\r\n/* create the adjcent countries list\r\nbased on the borders of the current country */\r\nconst borderMaker = (totalCountries, countryDetails, darkMode) => {\r\n  /*  create the adjacent countries list =>\r\n  1- check through total countries list for those countries\r\n  whose alpha3code is included in the borders list of the current country\r\n  2-add the country to the borderCountries' list */\r\n  let borderCountries = totalCountries.filter(country => {\r\n    return countryDetails.borders.includes(country.alpha3Code);\r\n  });\r\n\r\n  /* create a seperate link for each country */\r\n  borderCountries = borderCountries.map(country => (\r\n    <Link\r\n      to={`/${country.name}`}\r\n      key={country.name}\r\n      className={darkMode ? `dark darkElements` : `light lightElements`}\r\n    >\r\n      {country.name}\r\n    </Link>\r\n  ));\r\n  /* only return the list when the list isn't empty */\r\n  return (\r\n    borderCountries.length !== 0 && (\r\n      <div className={styles.borderCountries}>\r\n        <h3>Border Countries: </h3>\r\n        <div> {borderCountries}</div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\nconst BorderCountries = ({ totalCountries, countryDetails, darkMode }) => (\r\n  <div className={darkMode ? \"dark\" : \"light\"}>\r\n    {borderMaker(totalCountries, countryDetails, darkMode)}\r\n  </div>\r\n);\r\n\r\nexport default BorderCountries;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Numeral from \"numeral\";\r\nimport { Link } from \"react-router-dom\";\r\nimport styles from \"./CountryDetails.module.scss\";\r\nimport NavBar from \"../NavBar/NavBar\";\r\nimport Loading from \"../Loading/Loading\";\r\nimport BorderCountries from \"./BorderCountries/BorderCountries\";\r\n\r\nclass CountryDetails extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      countryDetails: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    //get the necessary data for the current country\r\n    axios\r\n      .get(\r\n        `https://restcountries.eu/rest/v2/name/${this.props.match.params.countryName}`\r\n      )\r\n      .then(response => {\r\n        // console.log(this.props.match.params.countryName, response.data[0]);\r\n        this.setState(() => ({\r\n          countryDetails: response.data[0]\r\n        }));\r\n      })\r\n      .catch(error => console.log(error));\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    //detect if the url key is changing and then update the state based on that\r\n    if (prevProps.location.key !== this.props.location.key) {\r\n      axios\r\n        .get(\r\n          `https://restcountries.eu/rest/v2/name/${this.props.match.params.countryName}`\r\n        )\r\n        .then(response => {\r\n          this.setState(() => ({ countryDetails: response.data[0] }));\r\n        })\r\n        .catch(error => console.log(error));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { darkMode, appModeChanger, totalCountries } = this.props;\r\n    const { countryDetails } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <header\r\n          className={`${styles.countryDetails} ${darkMode ? `dark` : `light`}`}\r\n        >\r\n          <NavBar darkMode={darkMode} appModeChanger={appModeChanger} />\r\n          <Link\r\n            to=\"/\"\r\n            className={`${styles.backButton} ${\r\n              darkMode ? \"dark darkElements\" : \"light lightElements\"\r\n            }`}\r\n          >\r\n            <i className=\"fas fa-arrow-left\"></i>\r\n            Back\r\n          </Link>\r\n        </header>\r\n        <main\r\n          className={`${styles.countryDetails} ${styles.main}  ${\r\n            darkMode ? `dark` : `light`\r\n          }`}\r\n        >\r\n          {/* if the country details have not been fetched yet -> show loading gif\r\n              if done-> show the details\r\n          */}\r\n          {countryDetails ? (\r\n            <React.Fragment>\r\n              <div className={styles.flag}>\r\n                <img\r\n                  src={countryDetails.flag}\r\n                  alt={`${countryDetails.name} flag`}\r\n                />\r\n              </div>\r\n              <div className={styles.details}>\r\n                <h1> {this.props.match.params.countryName}</h1>\r\n                <div className={styles.detailsContainer}>\r\n                  <div className={styles.mainDetails}>\r\n                    <p>\r\n                      Native Name:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {countryDetails.nativeName}{\" \"}\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Population:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {Numeral(countryDetails.population).format(0, 0)}\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Region:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {countryDetails.region}\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Sub Region:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {\" \"}\r\n                        {countryDetails.subregion}\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Capital:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {\" \"}\r\n                        {countryDetails.capital}\r\n                      </span>\r\n                    </p>\r\n                  </div>\r\n                  <div className={styles.additionalDetails}>\r\n                    <p>\r\n                      Top Level Domain:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {countryDetails.topLevelDomain}\r\n                      </span>\r\n                    </p>\r\n                    <p>\r\n                      Currencies:{\" \"}\r\n                      <span\r\n                        className={\r\n                          darkMode ? styles.darkDetails : styles.lightDetails\r\n                        }\r\n                      >\r\n                        {\" \"}\r\n                        {countryDetails.currencies[0].name}\r\n                      </span>\r\n                    </p>\r\n                    <p className={styles.languages}>\r\n                      Languages :\r\n                      {countryDetails.languages.map(({ name }) => (\r\n                        <span\r\n                          className={\r\n                            darkMode ? styles.darkDetails : styles.lightDetails\r\n                          }\r\n                          key={name}\r\n                        >\r\n                          {name}\r\n                        </span>\r\n                      ))}\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                {totalCountries && (\r\n                  <BorderCountries\r\n                    {...{ totalCountries, countryDetails }}\r\n                    darkMode={darkMode}\r\n                  />\r\n                )}\r\n              </div>\r\n            </React.Fragment>\r\n          ) : (\r\n            <Loading darkMode={darkMode} />\r\n          )}\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CountryDetails;\r\n","import React from \"react\";\r\n\r\nconst NotFound = () => <React.Fragment>404 not found</React.Fragment>;\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\nimport \"./App.scss\";\nimport Dashboard from \"./Dashboard/Dashboard\";\nimport CountryDetails from \"./CountryDetails/CountryDetails\";\nimport NotFound from \"./NotFoundPage/NotFound\";\n\nclass App extends Component {\n  state = {\n    darkMode: true,\n    totalCountries: []\n  };\n//change the darkmode state based on user interaction\n  appModeChanger = () => {\n    this.setState(prevState => ({ darkMode: !prevState.darkMode }));\n  };\n\n  componentDidMount() {\n    // fetch the countrylist data from the api\n    axios\n      .get(`https://restcountries.eu/rest/v2/all`)\n      .then(res => {\n        this.setState(() => ({\n          totalCountries: res.data\n        }));\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }\n\n  render() {\n    const {\n      darkMode,\n      totalCountries,\n    } = this.state;\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={routeProps => (\n              <Dashboard\n                {...routeProps}\n                appModeChanger={this.appModeChanger}\n                darkMode={darkMode}\n                totalCountries={totalCountries}\n              />\n            )}\n          ></Route>\n          <Route\n            exact\n            path=\"/:countryName\"\n            render={routeProps => (\n              <CountryDetails\n                {...routeProps}\n                darkMode={darkMode}\n                appModeChanger={this.appModeChanger}\n                totalCountries={totalCountries}\n              />\n            )}\n          />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"countryItem\":\"CountryItem_countryItem__3U-yw\",\"background\":\"CountryItem_background__j1Wge\",\"textContainer\":\"CountryItem_textContainer__1YuW0\",\"darkCaption\":\"CountryItem_darkCaption__2pvJJ\",\"lightCaption\":\"CountryItem_lightCaption__1Kie4\"};"],"sourceRoot":""}